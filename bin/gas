#!/usr/bin/env node

var package = require('../package.json');
var program = require('commander');
var path = require('path');
var lib = path.join(__dirname, '../lib');

program
    .version(package.version);

program
    .command('auth')
    .option('-f, --force', 'Force reauthentication')
    .description('authenticate the Drive API (add \'-f\' to force reauthentication)')
    .action(require(lib + '/auth'));

program
    .command('create <name>')
    .description('create a new project in your Google Drive')
    .action(require(lib + '/remote-create'));

program
    .command('new <name>')
    .description('create a new Google Apps Script project in your Google Drive and then clone that project locally')
    .action(require(lib + '/new'));

program
    .command('delete <fileName|fileId>')
    .alias('remove')
    .description('delete a project from your Google Drive')
    .action(require(lib + '/remote-delete'));

program
    .command('rename <fileName|fileId> <newName>')
    .description('rename a project in your Google Drive')
    .action(require(lib + '/remote-rename'));

program
    .command('link <fileName|fileId>')
    .description('link the remote project with the given fileId to the current local folder')
    .action(require(lib + '/link'));

program
    .command('list [nameFilter]')
    .description('list your remote projects and their fileId\'s (optional filter on filename)')
    .action(require(lib + '/list'));

program
    .command('clone <fileName|fileId>')
    .description('create a new local folder, link the remote project with the given fileId and do a pull from remote')
    .action(require(lib + '/clone'));

program
    .command('push')
    .alias('deploy')
    .description('push your local code to the linked project on your Google Drive')
    .action(require(lib + '/push'));

program
    .command('pull')
    .option('-i, --include', 'Pull included files from their sources')
    .description('pull code from your Google Drive, (add \'-i\' to also pull included files)')
    .action(require(lib + '/pull'));

program
    .command('open [fileName|fileId]')
    .description('open the project linked to the current folder or a specified project in the online editor')
    .action(require(lib + '/open'));

program
    .command('info [fileName|fileId]')
    .description('display info the project linked to the current folder or a specified project')
    .action(require(lib + '/info'));

program
    .command('include')
    .description('pull included files specified in \'gas-include.js\'')
    .action(require(lib + '/include'));

program
    .command('*')
    .action(function(argv) {
        console.log('\'gas %s\' is not a valid command use \'gas -h\' for help', argv);
        process.exit(2);
    });

program.on('--help', function() {
    console.log('  Examples:');
    console.log('');
    console.log('    $ gas new myScript');
    console.log('    $ cd myScript');
    console.log('    $ gas open');
    console.log('');
    console.log('    $ gas list');
    console.log('    $ gas clone myScript');
    console.log('');
    console.log('    $ mkdir src');
    console.log('    $ cd src');
    console.log('    $ gas create myScript2');
    console.log('    $ gas link myScript');
    console.log('    $ gas info');
    console.log('    $ gas pull');
    console.log('');
});

program.parse(process.argv);

if (program.args.length < 1) {
    program.outputHelp();
    process.exit(2);
}
